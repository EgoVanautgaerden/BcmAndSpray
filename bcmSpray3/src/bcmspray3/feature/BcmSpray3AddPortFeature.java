/*************************************************************************************
 *
 * Generated on Thu Mar 21 09:39:54 CET 2013 by Spray AddShapeFromDslFeature.xtend
 * 
 * This file is an extension point: copy to "src" folder to manually add code to this
 * extension point.
 *
 *************************************************************************************/
package bcmspray3.feature;

//Author: Ego Vanautgaerden

import javax.swing.JOptionPane;

import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.IAddContext;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.services.IGaService;
import org.eclipselabs.spray.runtime.graphiti.shape.ISprayShape;
import org.eclipselabs.spray.runtime.graphiti.styles.ISprayStyle;

import bcm.Port;
import bcm.PortType;
import bcmspray3.features.BcmSpray3AddPortFeatureBase;
import bcmspray3.shapes.PortShape;
import bcmspray3.styles.InputPortStyle;
import bcmspray3.styles.OutputPortStyle;

public class BcmSpray3AddPortFeature extends BcmSpray3AddPortFeatureBase {
    
	public BcmSpray3AddPortFeature(final IFeatureProvider fp) {
        super(fp);
    }

    @Override
    //function extended to make the add port automaticle recognise if it is an input and an output
    //this only works if you use the words IN, INPUT or input in the name if you want an input, OUT, OUTPUT or output in the name if you want an output
    //else this will default taken an output port
    public PictogramElement add(final IAddContext context) {
    	
    	//A message dialog to get the name of that port
    	String name = JOptionPane.showInputDialog("Give in the name of the port");
    	
    	//standard code for creation of a port, autogenerated
    	//STARTS HERE
        Port addedModelElement = (Port) context.getNewObject();

        // code to make NEW STUFF
        @SuppressWarnings(value = { "unused" })
        Object target = getBusinessObjectForPictogramElement(context.getTargetContainer());
        ContainerShape targetContainer = context.getTargetContainer();
        //options to set the style according to the name
        ISprayStyle style = null;
        int type = 0;
        if (name.contains("input") || name.contains("IN") || name.contains("INPUT")){
            style = new InputPortStyle();
        } else {
        	if (name.contains("output") || name.contains("OUT") || name.contains("OUTPUT")){
        		style = new OutputPortStyle();
        	} else {
        		type = JOptionPane.showConfirmDialog(null, "no default recognized it will be set to output, OK?\nSelect Yes if you want an Output and No if you want an INPUT\nSelecting CANCEL will also make an input port");
        		if (type == 0){
        			style = new OutputPortStyle();
        		}
        		if (type == 1 || type == 2){
        			style = new InputPortStyle();
        		}
        	}
        }
        ISprayShape shape = new PortShape(getFeatureProvider());
        ContainerShape conShape = shape.getShape(targetContainer, style);
        IGaService gaService = Graphiti.getGaService();
        gaService.setLocation(conShape.getGraphicsAlgorithm(), context.getX(), context.getY());
        link(conShape, addedModelElement);
        linkShapes(conShape, addedModelElement);

        setDoneChanges(true);
        updatePictogramElement(conShape);
        layout(conShape);
        //ENDS HERE
        
        
        //options to set the porttype according to the name
        if (name.contains("input") || name.contains("IN") || name.contains("INPUT")){
        	addedModelElement.setType(PortType.IN);
        } else {
        	if (name.contains("output") || name.contains("OUT") || name.contains("OUTPUT")){
        		addedModelElement.setType(PortType.OUT);
        	} else {
        		if (type == 0){
        			addedModelElement.setType(PortType.OUT);
        		}
        		if (type == 1 || type == 2){
        			addedModelElement.setType(PortType.IN);
        		}
        	}
        }
        
        
        //set the name to what you have given in
        addedModelElement.setName(name);

        return conShape;
    }
}
